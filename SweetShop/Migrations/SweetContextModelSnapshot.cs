// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SweetShop.Models;

#nullable disable

namespace SweetShop.Migrations
{
    [DbContext(typeof(SweetContext))]
    partial class SweetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SweetShop.Models.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<int>("catID")
                        .HasColumnType("int");

                    b.Property<float>("finalAmount")
                        .HasColumnType("real");

                    b.Property<int>("prodID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float>("totalPrice")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("catID");

                    b.HasIndex("prodID");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("SweetShop.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("SweetShop.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("SweetShop.Models.Inventory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("catID")
                        .HasColumnType("int");

                    b.Property<int>("prodID")
                        .HasColumnType("int");

                    b.Property<int>("quantityAvail")
                        .HasColumnType("int");

                    b.Property<int>("totalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("totalSold")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catID");

                    b.HasIndex("prodID");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("SweetShop.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("catID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgpath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<string>("prodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catID");

                    b.HasIndex("cityID");

                    b.ToTable("product");
                });

            modelBuilder.Entity("SweetShop.Models.Cart", b =>
                {
                    b.HasOne("SweetShop.Models.Category", "cat")
                        .WithMany()
                        .HasForeignKey("catID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SweetShop.Models.Product", "prod")
                        .WithMany()
                        .HasForeignKey("prodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");

                    b.Navigation("prod");
                });

            modelBuilder.Entity("SweetShop.Models.Inventory", b =>
                {
                    b.HasOne("SweetShop.Models.Category", "cat")
                        .WithMany()
                        .HasForeignKey("catID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SweetShop.Models.Product", "prod")
                        .WithMany()
                        .HasForeignKey("prodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");

                    b.Navigation("prod");
                });

            modelBuilder.Entity("SweetShop.Models.Product", b =>
                {
                    b.HasOne("SweetShop.Models.Category", "cat")
                        .WithMany()
                        .HasForeignKey("catID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SweetShop.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");

                    b.Navigation("city");
                });
#pragma warning restore 612, 618
        }
    }
}
